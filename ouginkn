import pygame
import random
import os
from pygame import *

# Инициализация pygame
pygame.init()

# Проверка инициализации микшера
if pygame.mixer.get_init() is None:
    pygame.mixer.init()

# Константы
SCREEN_WIDTH = 700
SCREEN_HEIGHT = 500
ASTEROID_COUNT = 3  # Количество астероидов

# Создание окна игры
window = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Космический корабль")

# Установка FPS
clock = pygame.time.Clock()
FPS = 60

# Шрифты
try:
    font = pygame.font.SysFont('Arial', 36)
    large_font = pygame.font.SysFont('Arial', 70)
except:
    font = pygame.font.Font(None, 30)
    large_font = pygame.font.Font(None, 70)

# Загрузка изображений с обработкой ошибок
def load_image(name, size=None):
    try:
        img = pygame.image.load(name)
        if size:
            img = pygame.transform.scale(img, size)
        return img
    except:
        # Создаем заглушку если изображение не найдено
        surf = pygame.Surface(size if size else (50, 50))
        surf.fill((255, 0, 255))  # Фиолетовый цвет для отсутствующих изображений
        return surf

# Загрузка звуков с обработкой ошибок
def load_sound(name):
    try:
        return pygame.mixer.Sound(name)
    except:
        class DummySound:
            def play(self): pass
        return DummySound()

# Фон игры
background = load_image("space.jpg", (SCREEN_WIDTH, SCREEN_HEIGHT))

# Звуки
try:
    pygame.mixer.music.load("space.ogg")
    pygame.mixer.music.play(-1)
except:
    pass

fire_sound = load_sound("fire.ogg")
heavy_fire_sound = load_sound("heavy_fire.ogg")  # Добавлен звук для мощного выстрела
game_over_sound = load_sound("game_over.ogg")
win_sound = load_sound("win.ogg")

# Класс GameSprite
class GameSprite(pygame.sprite.Sprite):
    def __init__(self, player_image, player_x, player_y, player_speed, width=65, height=65):
        super().__init__()
        self.image = load_image(player_image, (width, height))
        self.speed = player_speed
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y
    
    def reset(self):
        window.blit(self.image, (self.rect.x, self.rect.y))

# Класс Player
class Player(GameSprite):
    def __init__(self, player_image, player_x, player_y, player_speed):
        super().__init__(player_image, player_x, player_y, player_speed, 65, 80)
        self.lives = 3
        self.special_shots = 5  # Количество специальных выстрелов
        self.shot_cooldown = 0  # Перезарядка между выстрелами
    
    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and self.rect.x > 5:
            self.rect.x -= self.speed
        if keys[pygame.K_RIGHT] and self.rect.x < SCREEN_WIDTH - self.rect.width - 5:
            self.rect.x += self.speed
        
        if self.shot_cooldown > 0:
            self.shot_cooldown -= 1

# Класс Enemy
class Enemy(GameSprite):
    def update(self):
        self.rect.y += self.speed
        if self.rect.y > SCREEN_HEIGHT:
            self.respawn()
            global missed
            missed += 1
    
    def respawn(self):
        self.rect.y = random.randint(-150, -50)
        self.rect.x = random.randint(0, SCREEN_WIDTH - self.rect.width)
        self.speed = random.randint(1, 3)

# Класс Bullet (обычные пули)
class Bullet(GameSprite):
    def __init__(self, player_x, player_y):
        super().__init__("bullet.png", player_x, player_y, 10, 15, 20)
        self.damage = 1  # Обычные пули наносят 1 урон
    
    def update(self):
        self.rect.y -= self.speed
        if self.rect.y < 0:
            self.kill()

# Класс HeavyBullet (специальные пули против астероидов)
class HeavyBullet(GameSprite):
    def __init__(self, player_x, player_y):
        super().__init__("heavy_bullet.png", player_x, player_y, 8, 25, 40)
        self.damage = 3  # Мощные пули наносят 3 урона
    
    def update(self):
        self.rect.y -= self.speed
        if self.rect.y < 0:
            self.kill()

# Класс Asteroid
class Asteroid(GameSprite):
    def __init__(self):
        size = random.randint(40, 80)
        speed = random.randint(2, 5)
        x = random.randint(0, SCREEN_WIDTH - size)
        y = random.randint(-200, -50)
        super().__init__("asteroid.png", x, y, speed, size, size)
        self.rotation = 0
        self.rotation_speed = random.randint(-3, 3)
        self.original_image = self.image
        self.health = 3  # У астероидов теперь есть здоровье
    
    def update(self):
        self.rect.y += self.speed
        # Вращение астероида
        self.rotation = (self.rotation + self.rotation_speed) % 360
        self.image = pygame.transform.rotate(self.original_image, self.rotation)
        self.rect = self.image.get_rect(center=self.rect.center)
        
        if self.rect.y > SCREEN_HEIGHT:
            self.respawn()
    
    def take_damage(self, damage):
        self.health -= damage
        if self.health <= 0:
            self.respawn()
            return True
        return False
    
    def respawn(self):
        size = random.randint(40, 80)
        self.health = 3
        self.original_image = load_image("asteroid.png", (size, size))
        self.image = self.original_image
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, SCREEN_WIDTH - size)
        self.rect.y = random.randint(-200, -50)
        self.speed = random.randint(2, 5)
        self.rotation_speed = random.randint(-3, 3)

def init_game():
    global ship, enemies, bullets, heavy_bullets, asteroids, missed, destroyed, game_over, win
    
    ship = Player("rocket.png", 320, 400, 5)
    enemies = pygame.sprite.Group()
    for _ in range(5):
        enemy = Enemy("ufo.png", random.randint(0, SCREEN_WIDTH-65), random.randint(-150, -50), random.randint(1, 3))
        enemies.add(enemy)
    
    asteroids = pygame.sprite.Group()
    for _ in range(ASTEROID_COUNT):
        asteroids.add(Asteroid())
    
    bullets = pygame.sprite.Group()
    heavy_bullets = pygame.sprite.Group()
    missed = 0
    destroyed = 0
    game_over = False
    win = False

def show_message(text, color):
    window.blit(background, (0, 0))
    message = large_font.render(text, True, color)
    restart_text = font.render("Нажмите R для рестарта или ESC для выхода", True, (200, 200, 200))
    
    window.blit(message, (SCREEN_WIDTH//2 - message.get_width()//2, 200 - message.get_height()//2))
    window.blit(restart_text, (SCREEN_WIDTH//2 - restart_text.get_width()//2, 300))
    pygame.display.update()

def draw_hearts():
    heart_img = load_image("heart.png", (30, 30))
    for i in range(ship.lives):
        window.blit(heart_img, (10 + i * 35, 50))

def draw_special_shots():
    shot_img = load_image("heavy_bullet_icon.png", (25, 25))
    shots_text = font.render(f"x{ship.special_shots}", True, (255, 255, 255))
    window.blit(shot_img, (10, 130))
    window.blit(shots_text, (40, 130))

# Инициализация игры
init_game()

# Игровой цикл
running = True
while running:
    # Обработка событий
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not game_over and not win and ship.shot_cooldown == 0:
                bullet = Bullet(ship.rect.centerx - 7, ship.rect.top)
                bullets.add(bullet)
                fire_sound.play()
                ship.shot_cooldown = 10  # Задержка между выстрелами
            
            # Специальный выстрел (уничтожает астероиды)
            elif event.key == pygame.K_LSHIFT and not game_over and not win and ship.special_shots > 0:
                heavy_bullet = HeavyBullet(ship.rect.centerx - 12, ship.rect.top)
                heavy_bullets.add(heavy_bullet)
                heavy_fire_sound.play()
                ship.special_shots -= 1
                ship.shot_cooldown = 20  # Большая задержка для специальных выстрелов
            
            elif event.key == pygame.K_r and (game_over or win):
                init_game()
            elif event.key == pygame.K_ESCAPE:
                running = False
    
    if not game_over and not win:
        # Обновление фона
        window.blit(background, (0, 0))
        
        # Обновление объектов
        ship.update()
        enemies.update()
        bullets.update()
        heavy_bullets.update()
        asteroids.update()
        
        # Отрисовка объектов
        ship.reset()
        enemies.draw(window)
        bullets.draw(window)
        heavy_bullets.draw(window)
        asteroids.draw(window)
        
        # Проверка столкновений пуль с врагами
        hits = pygame.sprite.groupcollide(bullets, enemies, True, True)
        for _ in hits:
            destroyed += 1
            enemy = Enemy("ufo.png", random.randint(0, SCREEN_WIDTH-65), random.randint(-150, -50), random.randint(1, 3))
            enemies.add(enemy)
        
        # Проверка столкновений тяжелых пуль с астероидами
        heavy_hits = pygame.sprite.groupcollide(heavy_bullets, asteroids, True, False)
        for bullet, asteroid_list in heavy_hits.items():
            for asteroid in asteroid_list:
                if asteroid.take_damage(bullet.damage):
                    destroyed += 1  # Учитываем уничтоженные астероиды в статистике
        
        # Проверка столкновений обычных пуль с астероидами (не уничтожают, но наносят урон)
        bullet_hits = pygame.sprite.groupcollide(bullets, asteroids, True, False)
        for bullet, asteroid_list in bullet_hits.items():
            for asteroid in asteroid_list:
                asteroid.take_damage(bullet.damage)
        
        # Проверка столкновения игрока с врагами
        if pygame.sprite.spritecollide(ship, enemies, True):
            ship.lives -= 1
            if ship.lives <= 0:
                game_over = True
                game_over_sound.play()
        
        # Проверка столкновения с астероидами
        if pygame.sprite.spritecollide(ship, asteroids, False):
            game_over = True
            game_over_sound.play()
        
        # Проверка условий победы/проигрыша
        if missed >= 3:
            game_over = True
            game_over_sound.play()
        
        if destroyed >= 15:  # Увеличили цель для победы
            win = True
            win_sound.play()
        
        # Отображение статистики
        missed_text = font.render(f"Пропущено: {missed}/3", True, (255, 255, 255))
        destroyed_text = font.render(f"Уничтожено: {destroyed}/15", True, (255, 255, 255))
        window.blit(missed_text, (10, 10))
        window.blit(destroyed_text, (10, 90))
        draw_hearts()
        draw_special_shots()  # Отображаем количество специальных выстрелов
    
    elif game_over:
        show_message("ПОРАЖЕНИЕ!", (255, 0, 0))
    
    elif win:
        show_message("ПОБЕДА!", (0, 255, 0))
    
    # Обновление экрана
    pygame.display.update()
    clock.tick(FPS)

pygame.quit()
